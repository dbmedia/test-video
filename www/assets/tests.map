{"version":3,"sources":["ttexp/tests/adapters/application.jshint.js","ttexp/tests/app.jshint.js","ttexp/tests/authenticators/oauth2.jshint.js","ttexp/tests/authorizers/oauth2.jshint.js","ttexp/tests/controllers/action.jshint.js","ttexp/tests/controllers/help.jshint.js","ttexp/tests/controllers/index.jshint.js","ttexp/tests/controllers/login.jshint.js","ttexp/tests/controllers/page-not-found.jshint.js","ttexp/tests/controllers/play.jshint.js","ttexp/tests/controllers/scenarios.jshint.js","ttexp/tests/controllers/scores.jshint.js","ttexp/tests/helpers/breaklines.jshint.js","ttexp/tests/helpers/ember-simple-auth.js","ttexp/tests/helpers/resolver.js","ttexp/tests/helpers/resolver.jshint.js","ttexp/tests/helpers/start-app.js","ttexp/tests/helpers/start-app.jshint.js","ttexp/tests/initializers/cordova.jshint.js","ttexp/tests/models/action.jshint.js","ttexp/tests/models/item.jshint.js","ttexp/tests/models/play-state.jshint.js","ttexp/tests/models/playthrough.jshint.js","ttexp/tests/models/scenario.jshint.js","ttexp/tests/models/score.jshint.js","ttexp/tests/models/tank.jshint.js","ttexp/tests/models/user.jshint.js","ttexp/tests/models/video.jshint.js","ttexp/tests/router.jshint.js","ttexp/tests/routes/application.jshint.js","ttexp/tests/routes/help.jshint.js","ttexp/tests/routes/index.jshint.js","ttexp/tests/routes/page-not-found.jshint.js","ttexp/tests/routes/play.jshint.js","ttexp/tests/routes/scenarios.jshint.js","ttexp/tests/routes/scores.jshint.js","ttexp/tests/services/current-user.jshint.js","ttexp/tests/services/session.jshint.js","ttexp/tests/test-helper.js","ttexp/tests/test-helper.jshint.js","ttexp/tests/unit/adapters/scenario-test.js","ttexp/tests/unit/adapters/scenario-test.jshint.js","ttexp/tests/unit/controllers/scenario-test.js","ttexp/tests/unit/controllers/scenario-test.jshint.js","ttexp/tests/unit/helpers/breaklines-test.js","ttexp/tests/unit/helpers/breaklines-test.jshint.js","ttexp/tests/unit/initializers/cordova-test.js","ttexp/tests/unit/initializers/cordova-test.jshint.js","ttexp/tests/unit/models/action-test.js","ttexp/tests/unit/models/action-test.jshint.js","ttexp/tests/unit/models/item-test.js","ttexp/tests/unit/models/item-test.jshint.js","ttexp/tests/unit/models/pippo-test.js","ttexp/tests/unit/models/pippo-test.jshint.js","ttexp/tests/unit/models/play-state-test.js","ttexp/tests/unit/models/play-state-test.jshint.js","ttexp/tests/unit/models/playthrough-test.js","ttexp/tests/unit/models/playthrough-test.jshint.js","ttexp/tests/unit/models/scenario-test.js","ttexp/tests/unit/models/scenario-test.jshint.js","ttexp/tests/unit/models/tank-test.js","ttexp/tests/unit/models/tank-test.jshint.js","ttexp/tests/unit/models/user-test.js","ttexp/tests/unit/models/user-test.jshint.js","ttexp/tests/unit/models/video-test.js","ttexp/tests/unit/models/video-test.jshint.js","ttexp/tests/unit/services/session-test.js","ttexp/tests/unit/services/session-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('ttexp/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('ttexp/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('ttexp/tests/authenticators/oauth2.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | authenticators/oauth2.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/oauth2.js should pass jshint.');\n  });\n});","define('ttexp/tests/authorizers/oauth2.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | authorizers/oauth2.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authorizers/oauth2.js should pass jshint.');\n  });\n});","define('ttexp/tests/controllers/action.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/action.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/action.js should pass jshint.');\n  });\n});","define('ttexp/tests/controllers/help.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/help.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/help.js should pass jshint.');\n  });\n});","define('ttexp/tests/controllers/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass jshint.');\n  });\n});","define('ttexp/tests/controllers/login.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/login.js should pass jshint.');\n  });\n});","define('ttexp/tests/controllers/page-not-found.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/page-not-found.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/page-not-found.js should pass jshint.');\n  });\n});","define('ttexp/tests/controllers/play.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/play.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/play.js should pass jshint.');\n  });\n});","define('ttexp/tests/controllers/scenarios.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/scenarios.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/scenarios.js should pass jshint.');\n  });\n});","define('ttexp/tests/controllers/scores.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/scores.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/scores.js should pass jshint.');\n  });\n});","define('ttexp/tests/helpers/breaklines.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/breaklines.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/breaklines.js should pass jshint.');\n  });\n});","define('ttexp/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _emberSimpleAuthAuthenticatorsTest) {\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _emberSimpleAuthAuthenticatorsTest['default']);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  ;\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  ;\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n\n  ;\n});","define('ttexp/tests/helpers/resolver', ['exports', 'ember/resolver', 'ttexp/config/environment'], function (exports, _emberResolver, _ttexpConfigEnvironment) {\n\n  var resolver = _emberResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _ttexpConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _ttexpConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('ttexp/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('ttexp/tests/helpers/start-app', ['exports', 'ember', 'ttexp/app', 'ttexp/config/environment'], function (exports, _ember, _ttexpApp, _ttexpConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application;\n\n    var attributes = _ember['default'].merge({}, _ttexpConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _ttexpApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('ttexp/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('ttexp/tests/initializers/cordova.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | initializers/cordova.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/cordova.js should pass jshint.');\n  });\n});","define('ttexp/tests/models/action.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/action.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/action.js should pass jshint.');\n  });\n});","define('ttexp/tests/models/item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/item.js should pass jshint.');\n  });\n});","define('ttexp/tests/models/play-state.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/play-state.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/play-state.js should pass jshint.');\n  });\n});","define('ttexp/tests/models/playthrough.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/playthrough.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/playthrough.js should pass jshint.');\n  });\n});","define('ttexp/tests/models/scenario.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/scenario.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/scenario.js should pass jshint.');\n  });\n});","define('ttexp/tests/models/score.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/score.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/score.js should pass jshint.\\nmodels/score.js: line 2, col 8, \\'Ember\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('ttexp/tests/models/tank.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/tank.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/tank.js should pass jshint.');\n  });\n});","define('ttexp/tests/models/user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass jshint.');\n  });\n});","define('ttexp/tests/models/video.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/video.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/video.js should pass jshint.');\n  });\n});","define('ttexp/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('ttexp/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('ttexp/tests/routes/help.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/help.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/help.js should pass jshint.');\n  });\n});","define('ttexp/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('ttexp/tests/routes/page-not-found.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/page-not-found.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/page-not-found.js should pass jshint.');\n  });\n});","define('ttexp/tests/routes/play.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/play.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/play.js should pass jshint.\\nroutes/play.js: line 82, col 19, \\'transition\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('ttexp/tests/routes/scenarios.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/scenarios.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/scenarios.js should pass jshint.\\nroutes/scenarios.js: line 20, col 13, \\'fileTransfer\\' is defined but never used.\\nroutes/scenarios.js: line 23, col 13, \\'fileFullpath\\' is defined but never used.\\nroutes/scenarios.js: line 70, col 19, \\'transition\\' is defined but never used.\\nroutes/scenarios.js: line 20, col 32, \\'FileTransfer\\' is not defined.\\nroutes/scenarios.js: line 81, col 28, \\'FileTransfer\\' is not defined.\\nroutes/scenarios.js: line 92, col 15, \\'readBinaryFile\\' is not defined.\\nroutes/scenarios.js: line 96, col 15, \\'displayImageByFileURL\\' is not defined.\\n\\n7 errors');\n  });\n});","define('ttexp/tests/routes/scores.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/scores.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/scores.js should pass jshint.');\n  });\n});","define('ttexp/tests/services/current-user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/current-user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/current-user.js should pass jshint.');\n  });\n});","define('ttexp/tests/services/session.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/session.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/session.js should pass jshint.\\nservices/session.js: line 2, col 8, \\'DS\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('ttexp/tests/test-helper', ['exports', 'ttexp/tests/helpers/resolver', 'ember-qunit'], function (exports, _ttexpTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_ttexpTestsHelpersResolver['default']);\n});","define('ttexp/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('ttexp/tests/unit/adapters/scenario-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:scenario', 'Unit | Adapter | scenario', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('ttexp/tests/unit/adapters/scenario-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/scenario-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/scenario-test.js should pass jshint.');\n  });\n});","define('ttexp/tests/unit/controllers/scenario-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:scenario', 'Unit | Controller | scenario', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('ttexp/tests/unit/controllers/scenario-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/scenario-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/scenario-test.js should pass jshint.');\n  });\n});","define('ttexp/tests/unit/helpers/breaklines-test', ['exports', 'ttexp/helpers/breaklines', 'qunit'], function (exports, _ttexpHelpersBreaklines, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | breaklines');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _ttexpHelpersBreaklines.breaklines)([42]);\n    assert.ok(result);\n  });\n});","define('ttexp/tests/unit/helpers/breaklines-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/breaklines-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/breaklines-test.js should pass jshint.');\n  });\n});","define('ttexp/tests/unit/initializers/cordova-test', ['exports', 'ember', 'ttexp/initializers/cordova', 'qunit'], function (exports, _ember, _ttexpInitializersCordova, _qunit) {\n\n  var application = undefined;\n\n  (0, _qunit.module)('Unit | Initializer | cordova', {\n    beforeEach: function beforeEach() {\n      _ember['default'].run(function () {\n        application = _ember['default'].Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    _ttexpInitializersCordova['default'].initialize(application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('ttexp/tests/unit/initializers/cordova-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/initializers/cordova-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/cordova-test.js should pass jshint.');\n  });\n});","define('ttexp/tests/unit/models/action-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('action', 'Unit | Model | action', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ttexp/tests/unit/models/action-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/action-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/action-test.js should pass jshint.');\n  });\n});","define('ttexp/tests/unit/models/item-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('item', 'Unit | Model | item', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ttexp/tests/unit/models/item-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/item-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/item-test.js should pass jshint.');\n  });\n});","define('ttexp/tests/unit/models/pippo-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('pippo', 'Unit | Model | pippo', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ttexp/tests/unit/models/pippo-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/pippo-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/pippo-test.js should pass jshint.');\n  });\n});","define('ttexp/tests/unit/models/play-state-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('play-state', 'Unit | Model | play state', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ttexp/tests/unit/models/play-state-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/play-state-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/play-state-test.js should pass jshint.');\n  });\n});","define('ttexp/tests/unit/models/playthrough-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('playthrough', 'Unit | Model | playthrough', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ttexp/tests/unit/models/playthrough-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/playthrough-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/playthrough-test.js should pass jshint.');\n  });\n});","define('ttexp/tests/unit/models/scenario-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('scenario', 'Unit | Model | scenario', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ttexp/tests/unit/models/scenario-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/scenario-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/scenario-test.js should pass jshint.');\n  });\n});","define('ttexp/tests/unit/models/tank-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('tank', 'Unit | Model | tank', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ttexp/tests/unit/models/tank-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/tank-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/tank-test.js should pass jshint.');\n  });\n});","define('ttexp/tests/unit/models/user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ttexp/tests/unit/models/user-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/user-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass jshint.');\n  });\n});","define('ttexp/tests/unit/models/video-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('video', 'Unit | Model | video', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ttexp/tests/unit/models/video-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/video-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/video-test.js should pass jshint.');\n  });\n});","define('ttexp/tests/unit/services/session-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:session', 'Unit | Service | session', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('ttexp/tests/unit/services/session-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/session-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/session-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('ttexp/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappingsvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}